// Generated by CoffeeScript 1.6.3
(function() {
  var ChallengeItemView, ChallengesPage, ChallengesView, EventInfoView, EventView, GoogleModel, HomePage, MainApp, MainLayout, MainRouter, NavItems, RulesItemView, RulesView, ScheduleItemView, ScheduleListView, ScheduleView, SubCollectionView, SubView, app, public_spreadsheet_url, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  public_spreadsheet_url = 'https://docs.google.com/spreadsheet/pub?key=0AuGqzqpyR-eVdF8tbWUxMFhhMTRjYzBtSHJLVEswU1E&output=html';

  MainApp = (function(_super) {
    __extends(MainApp, _super);

    function MainApp() {
      _ref = MainApp.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return MainApp;

  })(Backbone.Marionette.Application);

  app = new MainApp;

  app.addInitializer(function() {
    var router;
    router = new MainRouter;
    return Backbone.history.start({
      root: '/Backbone/index.html'
    });
  });

  MainRouter = (function(_super) {
    __extends(MainRouter, _super);

    function MainRouter() {
      this.buildLayout = __bind(this.buildLayout, this);
      _ref1 = MainRouter.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    MainRouter.prototype.routes = {
      '': 'showHome',
      'rules/': 'showChallenges'
    };

    MainRouter.prototype.initialize = function() {
      this.data = new GoogleModel;
      return this.firstLoad = true;
    };

    MainRouter.prototype.loadGo = function(slug) {
      var delayTime,
        _this = this;
      if (!this.data.get('challenges')) {
        this.listenTo(this.data, 'sync', this.buildLayout);
        this.data.fetch();
      }
      if (this.firstLoad) {
        delayTime = 400;
        this.firstLoad = false;
      } else {
        delayTime = 0;
      }
      return setTimeout(function() {
        switch (slug) {
          case 'home':
            return _this.mainLayout.showHome();
          case 'rules':
            return _this.mainLayout.showChallenges();
        }
      }, delayTime);
    };

    MainRouter.prototype.buildLayout = function() {
      this.mainLayout = new MainLayout({
        el: "#main-content",
        router: this,
        data: this.data
      });
      return this.mainLayout.render();
    };

    MainRouter.prototype.showHome = function() {
      return this.loadGo('home');
    };

    MainRouter.prototype.showChallenges = function() {
      return this.loadGo('rules');
    };

    return MainRouter;

  })(Backbone.Router);

  GoogleModel = (function(_super) {
    __extends(GoogleModel, _super);

    function GoogleModel() {
      _ref2 = GoogleModel.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    GoogleModel.prototype.url = 'js/ho.json';

    return GoogleModel;

  })(Backbone.Model);

  MainLayout = (function(_super) {
    __extends(MainLayout, _super);

    function MainLayout() {
      _ref3 = MainLayout.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    MainLayout.prototype.template = '#main-layout';

    MainLayout.prototype.regions = {
      nav: '.nav-content',
      content: '.content'
    };

    MainLayout.prototype.initialize = function(options) {
      this.router = options.router, this.data = options.data;
      return this.navView = new NavItems({
        model: this.data,
        router: this.router
      });
    };

    MainLayout.prototype.onRender = function(slug) {
      return this.nav.show(this.navView);
    };

    MainLayout.prototype.showHome = function() {
      this.$el.addClass('home');
      return this.content.show(new HomePage({
        data: this.data
      }));
    };

    MainLayout.prototype.showChallenges = function() {
      this.$el.removeClass('home');
      return this.content.show(new ChallengesPage({
        data: this.data
      }));
    };

    return MainLayout;

  })(Backbone.Marionette.Layout);

  HomePage = (function(_super) {
    __extends(HomePage, _super);

    function HomePage() {
      _ref4 = HomePage.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    HomePage.prototype.template = '#home-page';

    HomePage.prototype.regions = {
      welcome: '.welcome-container',
      format: '.format-container',
      schedule: '.schedule-container'
    };

    HomePage.prototype.initialize = function(options) {
      this.data = options.data;
      this.scheduleData = new Backbone.Collection(this.data.get('schedule'));
      this.eventData = new Backbone.Model(this.data.get('event_info')[0]);
      this.scheduleView = new ScheduleView({
        model: this.scheduleData,
        view: ScheduleListView
      });
      return this.eventInfoView = new EventView({
        model: this.eventData,
        view: EventInfoView
      });
    };

    HomePage.prototype.onShow = function() {
      this.schedule.show(this.scheduleView);
      return this.format.show(this.eventInfoView);
    };

    return HomePage;

  })(Backbone.Marionette.Layout);

  SubCollectionView = (function(_super) {
    __extends(SubCollectionView, _super);

    function SubCollectionView() {
      _ref5 = SubCollectionView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    SubCollectionView.prototype.regions = {
      content: '.content'
    };

    SubCollectionView.prototype.initialize = function(options) {
      return this.model = options.model, this.view = options.view, options;
    };

    SubCollectionView.prototype.onShow = function() {
      return this.renderView();
    };

    SubCollectionView.prototype.renderView = function() {
      this.myview = new this.view({
        collection: this.model
      });
      return this.content.show(this.myview);
    };

    return SubCollectionView;

  })(Backbone.Marionette.Layout);

  SubView = (function(_super) {
    __extends(SubView, _super);

    function SubView() {
      _ref6 = SubView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    SubView.prototype.regions = {
      content: '.content'
    };

    SubView.prototype.initialize = function(options) {
      return this.model = options.model, this.view = options.view, options;
    };

    SubView.prototype.onShow = function() {
      return this.renderView();
    };

    SubView.prototype.renderView = function() {
      this.myview = new this.view({
        model: this.model
      });
      return this.content.show(this.myview);
    };

    return SubView;

  })(Backbone.Marionette.Layout);

  ScheduleView = (function(_super) {
    __extends(ScheduleView, _super);

    function ScheduleView() {
      _ref7 = ScheduleView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    ScheduleView.prototype.template = '#sub-view';

    return ScheduleView;

  })(SubCollectionView);

  EventView = (function(_super) {
    __extends(EventView, _super);

    function EventView() {
      _ref8 = EventView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    EventView.prototype.template = '#sub-view';

    return EventView;

  })(SubView);

  ChallengesPage = (function(_super) {
    __extends(ChallengesPage, _super);

    function ChallengesPage() {
      _ref9 = ChallengesPage.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    ChallengesPage.prototype.template = '#challenges-page';

    ChallengesPage.prototype.regions = {
      rules: '.rules-container',
      challenges: '.challenges-container'
    };

    ChallengesPage.prototype.initialize = function(options) {
      this.data = options.data;
      this.rulesData = new Backbone.Collection(this.data.get('rules'));
      this.challengesData = new Backbone.Collection(this.data.get('challenges'));
      this.rulesView = new RulesView({
        collection: this.rulesData
      });
      return this.challengesView = new ChallengesView({
        collection: this.challengesData
      });
    };

    ChallengesPage.prototype.onShow = function() {
      this.rules.show(this.rulesView);
      return this.challenges.show(this.challengesView);
    };

    return ChallengesPage;

  })(Backbone.Marionette.Layout);

  ChallengeItemView = (function(_super) {
    __extends(ChallengeItemView, _super);

    function ChallengeItemView() {
      _ref10 = ChallengeItemView.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    ChallengeItemView.prototype.template = '#challenge-item';

    return ChallengeItemView;

  })(Backbone.Marionette.ItemView);

  ChallengesView = (function(_super) {
    __extends(ChallengesView, _super);

    function ChallengesView() {
      _ref11 = ChallengesView.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    ChallengesView.prototype.itemView = ChallengeItemView;

    ChallengesView.prototype.className = 'challenges';

    return ChallengesView;

  })(Backbone.Marionette.CollectionView);

  RulesItemView = (function(_super) {
    __extends(RulesItemView, _super);

    function RulesItemView() {
      _ref12 = RulesItemView.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    RulesItemView.prototype.template = '#rules-item';

    return RulesItemView;

  })(Backbone.Marionette.ItemView);

  RulesView = (function(_super) {
    __extends(RulesView, _super);

    function RulesView() {
      _ref13 = RulesView.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    RulesView.prototype.itemView = RulesItemView;

    RulesView.prototype.className = 'rules';

    return RulesView;

  })(Backbone.Marionette.CollectionView);

  ScheduleItemView = (function(_super) {
    __extends(ScheduleItemView, _super);

    function ScheduleItemView() {
      _ref14 = ScheduleItemView.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    ScheduleItemView.prototype.template = '#schedule-item';

    return ScheduleItemView;

  })(Backbone.Marionette.ItemView);

  ScheduleListView = (function(_super) {
    __extends(ScheduleListView, _super);

    function ScheduleListView() {
      _ref15 = ScheduleListView.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    ScheduleListView.prototype.itemView = ScheduleItemView;

    ScheduleListView.prototype.className = 'schedule';

    return ScheduleListView;

  })(Backbone.Marionette.CollectionView);

  EventInfoView = (function(_super) {
    __extends(EventInfoView, _super);

    function EventInfoView() {
      _ref16 = EventInfoView.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    EventInfoView.prototype.template = '#format-info';

    EventInfoView.prototype.className = 'info';

    return EventInfoView;

  })(Backbone.Marionette.ItemView);

  NavItems = (function(_super) {
    __extends(NavItems, _super);

    function NavItems() {
      _ref17 = NavItems.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    NavItems.prototype.template = '#navbar';

    NavItems.prototype.events = {
      'click .nav-link': 'goToPage'
    };

    NavItems.prototype.initialize = function(options) {
      this.router = options.router;
      return this.delegateEvents();
    };

    NavItems.prototype.goToPage = function(event) {
      var slug;
      slug = (this.$(event.currentTarget)).data('slug');
      if (slug !== 'leaderboard') {
        event.preventDefault();
        event.stopPropagation();
        (this.$('li')).removeClass('active');
        (this.$(event.currentTarget)).parent('li').addClass('active');
        if (slug === 'home') {
          return this.router.navigate('', {
            trigger: true,
            replace: true
          });
        } else {
          return this.router.navigate("" + slug + "/", {
            trigger: true,
            replace: true
          });
        }
      }
    };

    return NavItems;

  })(Backbone.Marionette.ItemView);

  $(document).ready(function() {
    return app.start();
  });

}).call(this);
